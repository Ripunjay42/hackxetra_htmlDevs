// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User{
  id                      String  @id @default(uuid())
  username                String  @unique
  email                   String  @unique
  firstName   String
  lastName    String
  phoneNumber String
  gender      Gender
  profilePicURL           String?
  bio                     String
  emailVerified           Boolean @default(false)
  isEmailVerified         Boolean   @default(false)
  forgotPasswordExpiry    DateTime?
  emailVerificationToken  String?
  emailVerificationExpiry DateTime?
  
  memberships             GroupMembers[]
  clubMemberships         ClubMember[]
  posts                   Post[]    
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}
enum Gender {
  MALE
  FEMALE
  OTHER
}


model Group{
  id             String  @id @default(uuid())
  name           String  @unique
  description    String?
  groupURL       String?

  members        GroupMembers[]
  posts          Post[]    
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model GroupMembers{
  id          String  @id @default(uuid())
  userId      String
  groupId     String
  joinedAt    DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  group       Group    @relation(fields: [groupId], references: [id],onDelete: Cascade)
}

model Club {
  id            String   @id @default(uuid())  
  name          String   @unique              
  description   String?                            
  coverImage    String?                        
  
  members       ClubMember[] 
  posts         Post[]                      
                     
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
}

model ClubMember {
  id       String   @id @default(uuid())      
  userId   String                             
  clubId   String                             
  joinedAt DateTime @default(now())           
  
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  club     Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  
  @@unique([userId, clubId])                  
  @@map("club_members")
}


model Post {
  id          String   @id @default(uuid())    
  content     String                           
  createdAt   DateTime @default(now())         
  userId      String                           
  groupId     String?                          
  clubId      String?                          
  
  user        User     @relation(fields: [userId], references: [id])
  group       Group?   @relation(fields: [groupId], references: [id])
  club        Club?    @relation(fields: [clubId], references: [id])
  
  @@map("posts")
}